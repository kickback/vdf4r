module VDF4R
  grammar KeyValues
    rule line
      (enter_object / exit_object / comment / key_value / key / blank) endline?
      {
        def value
          [:line, elements[0].value]
        end
      }
    end

    rule enter_object
      whitespace* '{' whitespace* comment?
      {
        def value
          [:enter_object, nil]
        end
      }
    end

    rule exit_object
      whitespace* '}' whitespace* comment?
      {
        def value
          [:exit_object, nil]
        end
      }
    end

    rule comment
      whitespace* '//' [^\n]* {
        def value
          [:comment, nil]
        end
      }
    end

    rule key_value
      whitespace* token whitespace* token whitespace* comment?
      {
        def value
          [:key_value, [elements[1].value, elements[3].value]]
        end
      }
    end

    rule key
      whitespace* token whitespace* comment?
      {
        def value
          [:key, [elements[1].value]]
        end
      }
    end

    rule blank
      whitespace*
      {
        def value
          [:blank, nil]
        end
      }
    end

    rule token
      token_delimiter [^"]* token_delimiter
      {
        def value
          elements[1...-1].collect { |e| e.text_value }.join
        end
      }
    end

    rule token_delimiter
      '"'
      {
        def value
          ''
        end
      }
    end

    rule whitespace
      [\t ]
      {
        [:whitespace, nil]
      }
    end

    rule endline
      [\r]? [\n]
      {
        [:endline, nil]
      }
    end
  end
end